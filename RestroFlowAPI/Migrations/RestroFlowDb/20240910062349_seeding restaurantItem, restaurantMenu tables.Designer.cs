// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestroFlowAPI.Data;

#nullable disable

namespace RestroFlowAPI.Migrations.RestroFlowDb
{
    [DbContext(typeof(RestroFlowDbContext))]
    [Migration("20240910062349_seeding restaurantItem, restaurantMenu tables")]
    partial class seedingrestaurantItemrestaurantMenutables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestroFlowAPI.Models.AlertRecipient", b =>
                {
                    b.Property<Guid>("AlertRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryAlertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlertRecipientId");

                    b.HasIndex("InventoryAlertId");

                    b.ToTable("AlertRecipients");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BudgetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BudgetCategory")
                        .HasColumnType("int");

                    b.Property<DateTime>("BudgetEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BudgetStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.ExpenseReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpenseTimePeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighestExpenseCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LaborCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LowestExpenseCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MiscellaneousExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Utilities")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("ExpenseReports");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.IncomeSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncomeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("IncomeSources");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AlertType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RestaurantItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantItemId");

                    b.ToTable("InventoryAlerts");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("InventoryReports");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            Address = "840 Glenferrie Rd, Hawthorn VIC 3122",
                            City = "Mebourne",
                            CreatedAt = new DateTime(2024, 1, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gami Chicken and Beer",
                            Suburb = "Hawthorn",
                            UpdatedAt = new DateTime(2024, 1, 1, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUdpated")
                        .HasColumnType("datetime2");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantItemId");

                    b.HasIndex("SupplierId");

                    b.ToTable("RestaurantInventories");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SupplierId");

                    b.ToTable("RestaurantItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f58a9385-8a8b-43e7-a7ca-5a953a980cf4"),
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(4562),
                            Name = "Whole chicken",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "Portion",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(4693)
                        },
                        new
                        {
                            Id = new Guid("122f8ddc-47dd-45e9-8bb5-6b1a3bd1949a"),
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(4992),
                            Name = "Boneless chicken",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "box",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(4996)
                        },
                        new
                        {
                            Id = new Guid("116d32b5-4407-4fe4-9c6e-2aa38c8b6712"),
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5000),
                            Name = "Chicken wings",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "container",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5001)
                        },
                        new
                        {
                            Id = new Guid("f8472b62-e223-4033-8fb4-59a762cd0f12"),
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5004),
                            Name = "Chicken Steak",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "container",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5005)
                        },
                        new
                        {
                            Id = new Guid("973d9cfe-b929-4cf3-ab02-8dfeb1fa9442"),
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5012),
                            Name = "Marinated beef",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "portion",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5013)
                        },
                        new
                        {
                            Id = new Guid("ea6d6784-afbe-4045-809d-90c3a972f12d"),
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5017),
                            Name = "Chicken powder",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5018)
                        },
                        new
                        {
                            Id = new Guid("f87c819a-5b3a-4c09-bb42-b387790b70c0"),
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5021),
                            Name = "Soy garlic",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5023)
                        },
                        new
                        {
                            Id = new Guid("51a801ff-89b7-4663-a308-b0b577018e14"),
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5026),
                            Name = "Spicy sauce",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5027)
                        },
                        new
                        {
                            Id = new Guid("7a456054-4b0c-4005-8623-b4a7ecfb4103"),
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5075),
                            Name = "Sweet Chiilies",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5077)
                        },
                        new
                        {
                            Id = new Guid("a50a5bdf-e0bb-41ae-b23d-87d5076265a7"),
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5081),
                            Name = "Wedges",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(5082)
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantMenus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ca19c31-2e04-42e7-8cad-6e61bd177eaf"),
                            Category = "Fried Chicken (Boneless)",
                            Description = "Gami's most popular dish is back! Once again served on our signature wooden plate",
                            DishName = "The Classic Boneless",
                            Price = 42m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("4d165d8f-fbcf-4144-a318-374e7f08cb57"),
                            Category = "Fried Chicken (Bone-in)",
                            Description = "The traditional way to enjoy Korean chicken, a hands-on approach.",
                            DishName = "Whole-Chicken",
                            Price = 40m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("1d74b052-3b59-465f-add2-d91f96b8961a"),
                            Category = "Fried Chicken (boneless)",
                            Description = "The cornerstone of Gami's authentic Korean taste.",
                            DishName = "Regular Chicken",
                            Price = 21m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("45859bd4-b0bd-4491-8b1b-7c33a940df8a"),
                            Category = "Fried Chicken (boneless)",
                            Description = "A mix of chicken wingettes and drumettes.",
                            DishName = "10 Wings",
                            Price = 17m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("19924c8f-32e0-4c3d-b425-995ed0ddca5a"),
                            Category = "Korean Classics",
                            Description = "Tender slices of marinated beef and ve ies stir-fried with sweet potato noodles in a sweet soy sauce, served with rice and a fresh green salad with Tangerine dressing.",
                            DishName = "Beef Bulgogi",
                            Price = 18.5m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("d5d66b38-5140-485b-8575-f83d5fae6a5f"),
                            Category = "Korean Classics",
                            Description = "A healthy and delicious Korean rice dish showcasing flavourful vegetables, your preferred protein and a choice of sauce. Topped with a fried egg.",
                            DishName = "Korean Classics",
                            Price = 16m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("dd636f75-f510-47eb-bfc8-cf2613defdba"),
                            Category = "Korean Classics",
                            Description = "TA beloved Korean favourite, featuring stir-fried rice cakes, fish cakes, assorted vegetables, and noodles, all coated in a rich and spicy Korean chilli sauce.",
                            DishName = "Tteok Bokki",
                            Price = 14.5m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("6dac4780-fbf3-41f4-8971-b7abdef83a86"),
                            Category = "Sides",
                            Description = "Locally grown cut potato strips coated in Gami signature batter.",
                            DishName = "Gami Chips",
                            Price = 6.9m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("fc693bcd-807b-4506-a8fd-dc3e31905a81"),
                            Category = "Sides",
                            Description = "5 deep-fried premium handmade dumplings, filled with chunky prawn meat wrapped in thin crispy skin.",
                            DishName = "Prawn Mandu",
                            Price = 14.5m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReviewContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewSource")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IncomeSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RestaurantMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IncomeSourceId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantMenuId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SaleReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AverageOrderValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BestSellingItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BestSellingItemQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberOfTransactions")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SalesByCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesByPaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesByTimePeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSalesRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WorstSellingItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorstSellingItemQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("SaleReports");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.StockOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RestaurantItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantItemId");

                    b.HasIndex("SupplierId");

                    b.ToTable("StockOrders");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Address = "12 Oceanview Drive",
                            City = "Bondi Beach",
                            ContactEmail = "jane@befood.com",
                            ContactName = "Jane Smith",
                            ContactPhone = "03 9654 3210",
                            CreatedAt = new DateTime(2024, 1, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "B&E Food",
                            State = "VIC",
                            UpdatedAt = new DateTime(2024, 1, 1, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Address = "45 Maple Street",
                            City = "South Yarra",
                            ContactEmail = "SarahJohnso@CFS.com",
                            ContactName = "Sarah Johnso",
                            ContactPhone = "07 3345 6721",
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(1549),
                            Name = "Complete Food Services",
                            State = "VIC",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(2022)
                        },
                        new
                        {
                            Id = new Guid("114288a7-a300-42c6-8578-5f52df5ce147"),
                            Address = "88 Kangaroo Court",
                            City = " Brisbane",
                            ContactEmail = " JamesCooper@FFI.com",
                            ContactName = "James Cooper",
                            ContactPhone = "08 9314 7890",
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(2041),
                            Name = "Fresh Food Industries",
                            State = "VIC",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(2043)
                        },
                        new
                        {
                            Id = new Guid("72ddd782-e777-41fe-85b2-e88c189a88f5"),
                            Address = "23 Sunset Avenue",
                            City = "Fremantle",
                            ContactEmail = "OliviaMiller@GFIFood.com",
                            ContactName = "Olivia Miller",
                            ContactPhone = "03 6234 9087",
                            CreatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(2046),
                            Name = "GFI Foods",
                            State = "VIC",
                            UpdatedAt = new DateTime(2024, 9, 10, 16, 23, 49, 73, DateTimeKind.Local).AddTicks(2048)
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierItemId");

                    b.ToTable("SupplierInventories");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierItems");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.AlertRecipient", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.InventoryAlert", "InventoryAlert")
                        .WithMany()
                        .HasForeignKey("InventoryAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryAlert");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Budget", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Expense", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.ExpenseReport", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryAlert", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.RestaurantItem", "RestaurantItem")
                        .WithMany()
                        .HasForeignKey("RestaurantItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestaurantItem");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryReport", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantInventory", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestroFlowAPI.Models.RestaurantItem", "RestaurantItem")
                        .WithMany()
                        .HasForeignKey("RestaurantItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestroFlowAPI.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantItem");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantItem", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestroFlowAPI.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantMenu", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Review", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Sale", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.IncomeSource", "IncomeSources")
                        .WithMany()
                        .HasForeignKey("IncomeSourceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.RestaurantMenu", "RestaurantMenus")
                        .WithMany()
                        .HasForeignKey("RestaurantMenuId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("IncomeSources");

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantMenus");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SaleReport", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurant", "restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.StockOrder", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.RestaurantItem", "RestaurantItem")
                        .WithMany()
                        .HasForeignKey("RestaurantItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantItem");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierInventory", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.SupplierItem", "SupplierItems")
                        .WithMany()
                        .HasForeignKey("SupplierItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Supplier");

                    b.Navigation("SupplierItems");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierItem", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
