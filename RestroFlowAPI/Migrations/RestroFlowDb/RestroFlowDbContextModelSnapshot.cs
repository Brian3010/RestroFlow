// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestroFlowAPI.Data;

#nullable disable

namespace RestroFlowAPI.Migrations.RestroFlowDb
{
    [DbContext(typeof(RestroFlowDbContext))]
    partial class RestroFlowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestroFlowAPI.Models.AlertRecipient", b =>
                {
                    b.Property<Guid>("AlertRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryAlertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlertRecipientId");

                    b.HasIndex("InventoryAlertId");

                    b.ToTable("AlertRecipients");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Budgets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BudgetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BudgetCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BudgetEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BudgetStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Budgets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d985b355-0f15-4c8b-bb38-27254ef9e6d9"),
                            BudgetAmount = 2000m,
                            BudgetCategory = "Supplies",
                            BudgetEndDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7302),
                            BudgetStartDate = new DateTime(2024, 9, 7, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7300),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("60b316a4-be55-463f-bb48-556c9156c2d0"),
                            BudgetAmount = 1000m,
                            BudgetCategory = "Labour",
                            BudgetEndDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7307),
                            BudgetStartDate = new DateTime(2024, 9, 7, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7306),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1a4a0c16-73a4-4ebe-9b05-326632c686fb"),
                            BudgetAmount = 400m,
                            BudgetCategory = "Others",
                            BudgetEndDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7311),
                            BudgetStartDate = new DateTime(2024, 9, 7, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7309),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.ExpenseReports", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HighestExpenseCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LaborCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LowestExpenseCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MiscellaneousExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Utilities")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("ExpenseReports");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Expenses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f46cea01-1473-46f2-84a4-928aa2e0aea0"),
                            Amount = 1500m,
                            ExpenseDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6765),
                            ExpenseType = "Rent",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("0d9ff582-12b3-4405-ac0a-cfce0197c9a0"),
                            Amount = 120m,
                            ExpenseDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6771),
                            ExpenseType = "Supplies",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("0a93be6c-b22f-4347-b4ef-005b9334adfc"),
                            Amount = 250m,
                            ExpenseDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6777),
                            ExpenseType = "Labour",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("5c7f59d6-7663-49d9-a9ef-22e95258ae62"),
                            Amount = 80m,
                            ExpenseDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6780),
                            ExpenseType = "Electrictity",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("ddca43f0-cf96-4879-892b-98b2b3d7aea3"),
                            Amount = 80m,
                            ExpenseDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6783),
                            ExpenseType = "Internet",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("eef9ec85-360c-4838-b196-4168ffe0fceb"),
                            Amount = 80m,
                            ExpenseDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6789),
                            ExpenseType = "Water",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("8c9db985-cb73-4be5-82a0-b7fc36a65087"),
                            Amount = 1500m,
                            ExpenseDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6792),
                            ExpenseType = "Rent",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("5103c8f7-92f9-46e1-84a3-cf089015a631"),
                            Amount = 100m,
                            ExpenseDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6795),
                            ExpenseType = "Supplies",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("be2ac81f-61ab-4ab9-b200-f83dedbc4162"),
                            Amount = 120m,
                            ExpenseDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6800),
                            ExpenseType = "Labour",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("57bf5cdc-6e13-43d7-8607-53af007c211f"),
                            Amount = 120m,
                            ExpenseDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6804),
                            ExpenseType = "Electrictity",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("238f13f9-fa22-410a-97ef-b359893324e5"),
                            Amount = 250m,
                            ExpenseDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6807),
                            ExpenseType = "Internet",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("93271fb5-4ca8-4291-b374-012d405b16bd"),
                            Amount = 120m,
                            ExpenseDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6812),
                            ExpenseType = "Water",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("e989a204-88e5-4181-86fd-3b190b765173"),
                            Amount = 1500m,
                            ExpenseDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6814),
                            ExpenseType = "Rent",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("d3e2aff6-60b4-4596-a150-0491b12a9051"),
                            Amount = 80m,
                            ExpenseDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6817),
                            ExpenseType = "Supplies",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("72908a1e-205e-4140-ba66-a1638939fbe3"),
                            Amount = 250m,
                            ExpenseDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6822),
                            ExpenseType = "Labour",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("4bef2152-be13-447c-816a-74632bd3ed35"),
                            Amount = 120m,
                            ExpenseDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6825),
                            ExpenseType = "Electrictity",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("b381637a-8e29-4968-a2db-23d3db817092"),
                            Amount = 120m,
                            ExpenseDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6829),
                            ExpenseType = "Internet",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("a85240f0-da9f-4079-b48b-44b7513e3bb4"),
                            Amount = 120m,
                            ExpenseDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6834),
                            ExpenseType = "Water",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryAlerts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RestaurantItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantItemId");

                    b.ToTable("InventoryAlerts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c6d786c-7f5d-478f-bc09-4b5b0ae7062e"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7159),
                            RestaurantItemId = new Guid("f58a9385-8a8b-43e7-a7ca-5a953a980cf4"),
                            Threshold = 9f,
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7162)
                        },
                        new
                        {
                            Id = new Guid("4db1f347-4241-463d-aab1-4a4b69dff866"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7171),
                            RestaurantItemId = new Guid("122f8ddc-47dd-45e9-8bb5-6b1a3bd1949a"),
                            Threshold = 10f,
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7173)
                        },
                        new
                        {
                            Id = new Guid("4015c867-6b8a-4c45-9d8c-6154dc0ca62f"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7177),
                            RestaurantItemId = new Guid("116d32b5-4407-4fe4-9c6e-2aa38c8b6712"),
                            Threshold = 8f,
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7179)
                        },
                        new
                        {
                            Id = new Guid("928e6700-9a0f-4d1d-a7e9-89dbbfc168c1"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7185),
                            RestaurantItemId = new Guid("f8472b62-e223-4033-8fb4-59a762cd0f12"),
                            Threshold = 9f,
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7187)
                        },
                        new
                        {
                            Id = new Guid("c7684f21-4b75-43c6-8de1-7e899d703241"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7191),
                            RestaurantItemId = new Guid("973d9cfe-b929-4cf3-ab02-8dfeb1fa9442"),
                            Threshold = 10f,
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7193)
                        },
                        new
                        {
                            Id = new Guid("af03fb75-f16e-49eb-b249-d35a87b762bc"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7199),
                            RestaurantItemId = new Guid("ea6d6784-afbe-4045-809d-90c3a972f12d"),
                            Threshold = 5f,
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7201)
                        },
                        new
                        {
                            Id = new Guid("674fc6a2-f252-4172-b73e-5fc4bd1c95d0"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7207),
                            RestaurantItemId = new Guid("f87c819a-5b3a-4c09-bb42-b387790b70c0"),
                            Threshold = 9f,
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7209)
                        },
                        new
                        {
                            Id = new Guid("cb7a425f-63fc-4e34-a6d8-6fa63f83a14f"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7214),
                            RestaurantItemId = new Guid("51a801ff-89b7-4663-a308-b0b577018e14"),
                            Threshold = 5f,
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7216)
                        },
                        new
                        {
                            Id = new Guid("37cc5eca-51c3-40db-ae58-8896b341d277"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7220),
                            RestaurantItemId = new Guid("7a456054-4b0c-4005-8623-b4a7ecfb4103"),
                            Threshold = 3f,
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7222)
                        },
                        new
                        {
                            Id = new Guid("6098f6e8-6634-463e-bb57-3245895bfdde"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7230),
                            RestaurantItemId = new Guid("a50a5bdf-e0bb-41ae-b23d-87d5076265a7"),
                            Threshold = 10f,
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7232)
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryReports", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("InventoryReports");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.PaymentMethods", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(6065),
                            PaymentName = "Uber Eats",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(6214)
                        },
                        new
                        {
                            Id = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(6448),
                            PaymentName = "DoorDash",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(6452)
                        },
                        new
                        {
                            Id = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(6455),
                            PaymentName = "EFTPOS",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(6456)
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantInventories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUdpated")
                        .HasColumnType("datetime2");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantItemId");

                    b.HasIndex("SupplierId");

                    b.ToTable("RestaurantInventories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a78b5b0-1c78-4e22-88cd-6c8294198895"),
                            LastUdpated = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6884),
                            Quantity = 3f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("f58a9385-8a8b-43e7-a7ca-5a953a980cf4"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "Portion"
                        },
                        new
                        {
                            Id = new Guid("c7bbe53e-f3f3-4fca-85e6-affb868a6bd0"),
                            LastUdpated = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6891),
                            Quantity = 12f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("122f8ddc-47dd-45e9-8bb5-6b1a3bd1949a"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "box"
                        },
                        new
                        {
                            Id = new Guid("40e10a4c-a1ad-42a4-9b38-5cb5ee2302fc"),
                            LastUdpated = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6895),
                            Quantity = 6f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("116d32b5-4407-4fe4-9c6e-2aa38c8b6712"),
                            SupplierId = new Guid("114288a7-a300-42c6-8578-5f52df5ce147"),
                            Unit = "container"
                        },
                        new
                        {
                            Id = new Guid("22840a0e-5db8-4461-b286-99fd9a8da5f2"),
                            LastUdpated = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6898),
                            Quantity = 22f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("f8472b62-e223-4033-8fb4-59a762cd0f12"),
                            SupplierId = new Guid("72ddd782-e777-41fe-85b2-e88c189a88f5"),
                            Unit = "container"
                        },
                        new
                        {
                            Id = new Guid("ccfc628e-60c3-498f-bd56-9f1ebbed07a7"),
                            LastUdpated = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6903),
                            Quantity = 6f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("973d9cfe-b929-4cf3-ab02-8dfeb1fa9442"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "portion"
                        },
                        new
                        {
                            Id = new Guid("341b80c6-d365-4a30-9bd3-c0dec657cc17"),
                            LastUdpated = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6907),
                            Quantity = 3f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("ea6d6784-afbe-4045-809d-90c3a972f12d"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("d8999bb0-1685-4763-9fe7-b68400fd4743"),
                            LastUdpated = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6911),
                            Quantity = 5f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("f87c819a-5b3a-4c09-bb42-b387790b70c0"),
                            SupplierId = new Guid("114288a7-a300-42c6-8578-5f52df5ce147"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("d102d814-fa04-4354-9dc7-919aea858348"),
                            LastUdpated = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6916),
                            Quantity = 3f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("51a801ff-89b7-4663-a308-b0b577018e14"),
                            SupplierId = new Guid("72ddd782-e777-41fe-85b2-e88c189a88f5"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("e880883a-6221-407b-921b-029bb98a502c"),
                            LastUdpated = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6919),
                            Quantity = 6f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("7a456054-4b0c-4005-8623-b4a7ecfb4103"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("4c41d3a5-c55e-4052-8c52-b2d893272fdd"),
                            LastUdpated = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6925),
                            Quantity = 11f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("a50a5bdf-e0bb-41ae-b23d-87d5076265a7"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("1a954d78-396e-41be-a694-01cfa73c2f55"),
                            LastUdpated = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6928),
                            Quantity = 1f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("f58a9385-8a8b-43e7-a7ca-5a953a980cf4"),
                            SupplierId = new Guid("114288a7-a300-42c6-8578-5f52df5ce147"),
                            Unit = "Portion"
                        },
                        new
                        {
                            Id = new Guid("9b1e7e07-60d3-4bf1-8b49-5ebd856b4aa5"),
                            LastUdpated = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6932),
                            Quantity = 4f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("122f8ddc-47dd-45e9-8bb5-6b1a3bd1949a"),
                            SupplierId = new Guid("72ddd782-e777-41fe-85b2-e88c189a88f5"),
                            Unit = "box"
                        },
                        new
                        {
                            Id = new Guid("887fdcd5-2125-4431-9e65-138123fe1a45"),
                            LastUdpated = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6997),
                            Quantity = 9f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("116d32b5-4407-4fe4-9c6e-2aa38c8b6712"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "container"
                        },
                        new
                        {
                            Id = new Guid("50c26a6d-8a78-4cf3-90d7-c4108ec0fd40"),
                            LastUdpated = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7003),
                            Quantity = 5f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("f8472b62-e223-4033-8fb4-59a762cd0f12"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "container"
                        },
                        new
                        {
                            Id = new Guid("a6280250-f6db-4abc-98ca-17addb681217"),
                            LastUdpated = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7007),
                            Quantity = 12f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("973d9cfe-b929-4cf3-ab02-8dfeb1fa9442"),
                            SupplierId = new Guid("114288a7-a300-42c6-8578-5f52df5ce147"),
                            Unit = "portion"
                        },
                        new
                        {
                            Id = new Guid("e75a8cf8-319c-4654-a376-82c4e1a8188c"),
                            LastUdpated = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7014),
                            Quantity = 6f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("ea6d6784-afbe-4045-809d-90c3a972f12d"),
                            SupplierId = new Guid("72ddd782-e777-41fe-85b2-e88c189a88f5"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("23491a9f-c493-4772-be30-9969f9ed6e6b"),
                            LastUdpated = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7018),
                            Quantity = 11f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("f87c819a-5b3a-4c09-bb42-b387790b70c0"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("a3d2a437-5bed-4792-93ac-574a87abd363"),
                            LastUdpated = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7026),
                            Quantity = 3f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("51a801ff-89b7-4663-a308-b0b577018e14"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("0850319c-3ce1-4363-851c-e41a40fdaceb"),
                            LastUdpated = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7030),
                            Quantity = 1f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("7a456054-4b0c-4005-8623-b4a7ecfb4103"),
                            SupplierId = new Guid("114288a7-a300-42c6-8578-5f52df5ce147"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("2b3cc697-e7d2-44fb-90c7-92672e60a48d"),
                            LastUdpated = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7035),
                            Quantity = 22f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("a50a5bdf-e0bb-41ae-b23d-87d5076265a7"),
                            SupplierId = new Guid("72ddd782-e777-41fe-85b2-e88c189a88f5"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("45688523-72bb-47c4-9f00-6331f53d11bf"),
                            LastUdpated = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7042),
                            Quantity = 5f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("f58a9385-8a8b-43e7-a7ca-5a953a980cf4"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "Portion"
                        },
                        new
                        {
                            Id = new Guid("17bb3d6b-c83d-4a03-a9b2-19ff5b662aed"),
                            LastUdpated = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7047),
                            Quantity = 9f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("122f8ddc-47dd-45e9-8bb5-6b1a3bd1949a"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "box"
                        },
                        new
                        {
                            Id = new Guid("dced3d69-142f-469e-801c-b684c9587de8"),
                            LastUdpated = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7051),
                            Quantity = 12f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("116d32b5-4407-4fe4-9c6e-2aa38c8b6712"),
                            SupplierId = new Guid("114288a7-a300-42c6-8578-5f52df5ce147"),
                            Unit = "container"
                        },
                        new
                        {
                            Id = new Guid("82ce5a84-4a91-4405-869e-d9c2d85067d8"),
                            LastUdpated = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7058),
                            Quantity = 4f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("f8472b62-e223-4033-8fb4-59a762cd0f12"),
                            SupplierId = new Guid("72ddd782-e777-41fe-85b2-e88c189a88f5"),
                            Unit = "container"
                        },
                        new
                        {
                            Id = new Guid("f4556d29-0609-460d-84d3-35c6d8fcbe2d"),
                            LastUdpated = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7064),
                            Quantity = 3f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("973d9cfe-b929-4cf3-ab02-8dfeb1fa9442"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "portion"
                        },
                        new
                        {
                            Id = new Guid("08b51291-7571-41b6-8c21-d1098002ba49"),
                            LastUdpated = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7070),
                            Quantity = 9f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("ea6d6784-afbe-4045-809d-90c3a972f12d"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("4f4a5ea9-175a-489d-9c22-483033304fe8"),
                            LastUdpated = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7075),
                            Quantity = 11f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("f87c819a-5b3a-4c09-bb42-b387790b70c0"),
                            SupplierId = new Guid("114288a7-a300-42c6-8578-5f52df5ce147"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("2330a0ca-a35a-447f-9efb-85ab7b99a244"),
                            LastUdpated = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7080),
                            Quantity = 12f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("51a801ff-89b7-4663-a308-b0b577018e14"),
                            SupplierId = new Guid("72ddd782-e777-41fe-85b2-e88c189a88f5"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("65601293-eba2-4912-a81f-ffd5dbcc2245"),
                            LastUdpated = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7087),
                            Quantity = 1f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("7a456054-4b0c-4005-8623-b4a7ecfb4103"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "bag"
                        },
                        new
                        {
                            Id = new Guid("7bf5b394-afe0-4ed4-9a18-1f78a7766c19"),
                            LastUdpated = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7091),
                            Quantity = 6f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantItemId = new Guid("a50a5bdf-e0bb-41ae-b23d-87d5076265a7"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag"
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SupplierId");

                    b.ToTable("RestaurantItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f58a9385-8a8b-43e7-a7ca-5a953a980cf4"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(4919),
                            Name = "Whole chicken",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "Portion",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5072)
                        },
                        new
                        {
                            Id = new Guid("122f8ddc-47dd-45e9-8bb5-6b1a3bd1949a"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5437),
                            Name = "Boneless chicken",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "box",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5442)
                        },
                        new
                        {
                            Id = new Guid("116d32b5-4407-4fe4-9c6e-2aa38c8b6712"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5506),
                            Name = "Chicken wings",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "container",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5508)
                        },
                        new
                        {
                            Id = new Guid("f8472b62-e223-4033-8fb4-59a762cd0f12"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5512),
                            Name = "Chicken Steak",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "container",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5513)
                        },
                        new
                        {
                            Id = new Guid("973d9cfe-b929-4cf3-ab02-8dfeb1fa9442"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5521),
                            Name = "Marinated beef",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Unit = "portion",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5523)
                        },
                        new
                        {
                            Id = new Guid("ea6d6784-afbe-4045-809d-90c3a972f12d"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5527),
                            Name = "Chicken powder",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5528)
                        },
                        new
                        {
                            Id = new Guid("f87c819a-5b3a-4c09-bb42-b387790b70c0"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5532),
                            Name = "Soy garlic",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5533)
                        },
                        new
                        {
                            Id = new Guid("51a801ff-89b7-4663-a308-b0b577018e14"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5537),
                            Name = "Spicy sauce",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5538)
                        },
                        new
                        {
                            Id = new Guid("7a456054-4b0c-4005-8623-b4a7ecfb4103"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5543),
                            Name = "Sweet Chiilies",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5544)
                        },
                        new
                        {
                            Id = new Guid("a50a5bdf-e0bb-41ae-b23d-87d5076265a7"),
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5548),
                            Name = "Wedges",
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            SupplierId = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Unit = "bag",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(5549)
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantMenus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantMenus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ca19c31-2e04-42e7-8cad-6e61bd177eaf"),
                            Category = "Fried Chicken (Boneless)",
                            Description = "Gami's most popular dish is back! Once again served on our signature wooden plate",
                            DishName = "The Classic Boneless",
                            Price = 42m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("4d165d8f-fbcf-4144-a318-374e7f08cb57"),
                            Category = "Fried Chicken (Bone-in)",
                            Description = "The traditional way to enjoy Korean chicken, a hands-on approach.",
                            DishName = "Whole-Chicken",
                            Price = 40m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("1d74b052-3b59-465f-add2-d91f96b8961a"),
                            Category = "Fried Chicken (boneless)",
                            Description = "The cornerstone of Gami's authentic Korean taste.",
                            DishName = "Regular Chicken",
                            Price = 21m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("45859bd4-b0bd-4491-8b1b-7c33a940df8a"),
                            Category = "Fried Chicken (boneless)",
                            Description = "A mix of chicken wingettes and drumettes.",
                            DishName = "10 Wings",
                            Price = 17m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("19924c8f-32e0-4c3d-b425-995ed0ddca5a"),
                            Category = "Korean Classics",
                            Description = "Tender slices of marinated beef and ve ies stir-fried with sweet potato noodles in a sweet soy sauce, served with rice and a fresh green salad with Tangerine dressing.",
                            DishName = "Beef Bulgogi",
                            Price = 18.5m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("d5d66b38-5140-485b-8575-f83d5fae6a5f"),
                            Category = "Korean Classics",
                            Description = "A healthy and delicious Korean rice dish showcasing flavourful vegetables, your preferred protein and a choice of sauce. Topped with a fried egg.",
                            DishName = "Korean Classics",
                            Price = 16m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("dd636f75-f510-47eb-bfc8-cf2613defdba"),
                            Category = "Korean Classics",
                            Description = "TA beloved Korean favourite, featuring stir-fried rice cakes, fish cakes, assorted vegetables, and noodles, all coated in a rich and spicy Korean chilli sauce.",
                            DishName = "Tteok Bokki",
                            Price = 14.5m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("6dac4780-fbf3-41f4-8971-b7abdef83a86"),
                            Category = "Sides",
                            Description = "Locally grown cut potato strips coated in Gami signature batter.",
                            DishName = "Gami Chips",
                            Price = 6.9m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("fc693bcd-807b-4506-a8fd-dc3e31905a81"),
                            Category = "Sides",
                            Description = "5 deep-fried premium handmade dumplings, filled with chunky prawn meat wrapped in thin crispy skin.",
                            DishName = "Prawn Mandu",
                            Price = 14.5m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("29585767-ced3-46a6-8f1f-06455c4b1172"),
                            Category = "Korean Classics",
                            Description = "",
                            DishName = "Kimchi Fried Rice",
                            Price = 13.5m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("07a67762-a063-46db-94d1-080237b187a5"),
                            Category = "Korean Classics",
                            Description = "",
                            DishName = "Kimchi Pancake",
                            Price = 16m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("bab92f8b-1fd6-4fbb-9c66-777c49280d54"),
                            Category = "Korean Classics",
                            Description = "",
                            DishName = "Japchae",
                            Price = 15.5m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("75734df5-e59e-4d9e-a224-ed8e4ae67fdd"),
                            Category = "Sides",
                            Description = "",
                            DishName = "Chicken Skewers ",
                            Price = 10m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("d02988c8-bd91-400d-8593-403c285c6dfb"),
                            Category = "Sides",
                            Description = "",
                            DishName = "Chicken Skewer plate",
                            Price = 28m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("f6c1d21b-b9dd-452f-8e14-364f530bf7b8"),
                            Category = "Sides",
                            Description = "",
                            DishName = "Potato Heaven",
                            Price = 16.5m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        },
                        new
                        {
                            Id = new Guid("6e4aaccc-3c0d-4d91-a8e0-10e1a70a24f2"),
                            Category = "Sides",
                            Description = "",
                            DishName = "Chicken Burger",
                            Price = 15m,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1")
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Restaurants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            Address = "840 Glenferrie Rd, Hawthorn VIC 3122",
                            City = "Mebourne",
                            CreatedAt = new DateTime(2024, 1, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gami Chicken and Beer",
                            Suburb = "Hawthorn",
                            UpdatedAt = new DateTime(2024, 1, 1, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Reviews", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReviewContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("901aec51-10c0-48ea-9106-3139d24ec738"),
                            Rating = 3f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            ReviewDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7368),
                            ReviewSource = "Google"
                        },
                        new
                        {
                            Id = new Guid("12dc6e46-07e0-4755-b1f9-a9392c16525a"),
                            Rating = 2f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            ReviewDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7377),
                            ReviewSource = "Facebook"
                        },
                        new
                        {
                            Id = new Guid("39bc5328-9ba1-4b75-8dbc-4742ab07946c"),
                            Rating = 2f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            ReviewDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7385),
                            ReviewSource = "Instagram"
                        },
                        new
                        {
                            Id = new Guid("f6f3b4d4-1f7f-4568-be72-9aa58eac07ee"),
                            Rating = 2f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            ReviewDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7391),
                            ReviewSource = "Instagram"
                        },
                        new
                        {
                            Id = new Guid("33bfbc0e-aeef-48cc-a916-d547d95aaa22"),
                            Rating = 4f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            ReviewDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7399),
                            ReviewSource = "Instagram"
                        },
                        new
                        {
                            Id = new Guid("0a6ad7c2-ea6f-491e-9289-27af236f2d58"),
                            Rating = 3f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            ReviewDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7409),
                            ReviewSource = "Facebook"
                        },
                        new
                        {
                            Id = new Guid("3829b4f5-c310-4bc3-9604-dfb97b36967e"),
                            Rating = 2f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            ReviewDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7415),
                            ReviewSource = "Others"
                        },
                        new
                        {
                            Id = new Guid("4c18623a-134d-42d7-b404-3bff2179e7b8"),
                            Rating = 3f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            ReviewDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7422),
                            ReviewSource = "Instagram"
                        },
                        new
                        {
                            Id = new Guid("d298b3d5-6dba-4827-b7cb-a1e878dc78c2"),
                            Rating = 5f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            ReviewDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7427),
                            ReviewSource = "Facebook"
                        },
                        new
                        {
                            Id = new Guid("bef858da-3d92-410d-b1df-8a001db7d0cc"),
                            Rating = 2f,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            ReviewDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(7432),
                            ReviewSource = "Others"
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SaleReports", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BestSellingItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BestSellingItemQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberOfTransactions")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SalesByCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesByPaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSalesRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WorstSellingItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorstSellingItemQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("SaleReports");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Sales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RestaurantMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantMenuId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3120d98f-8e85-4b91-b908-318be6194490"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 11,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("9ca19c31-2e04-42e7-8cad-6e61bd177eaf"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6349),
                            TotalAmount = 462m
                        },
                        new
                        {
                            Id = new Guid("59ed7c5b-8076-4573-b1ed-f9f06114e681"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 20,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("4d165d8f-fbcf-4144-a318-374e7f08cb57"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6400),
                            TotalAmount = 800m
                        },
                        new
                        {
                            Id = new Guid("ec1f4df5-001a-404f-b72f-66d9d63a7bf9"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("1d74b052-3b59-465f-add2-d91f96b8961a"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6407),
                            TotalAmount = 336m
                        },
                        new
                        {
                            Id = new Guid("7c84df89-82c2-4e84-bf77-066bb556fdc0"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 11,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("45859bd4-b0bd-4491-8b1b-7c33a940df8a"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6411),
                            TotalAmount = 187m
                        },
                        new
                        {
                            Id = new Guid("829b2721-ae55-4e4a-b65b-9f6c70073a44"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 15,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("19924c8f-32e0-4c3d-b425-995ed0ddca5a"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6417),
                            TotalAmount = 277.5m
                        },
                        new
                        {
                            Id = new Guid("94c32373-a48e-4a4d-bf6f-1610341c2217"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 15,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("d5d66b38-5140-485b-8575-f83d5fae6a5f"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6425),
                            TotalAmount = 240m
                        },
                        new
                        {
                            Id = new Guid("5235b027-629c-4465-9c79-2d01e0b3f0de"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 10,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("dd636f75-f510-47eb-bfc8-cf2613defdba"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6429),
                            TotalAmount = 145.0m
                        },
                        new
                        {
                            Id = new Guid("0954da26-9292-4e35-aa6c-72cff9fcd38d"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("6dac4780-fbf3-41f4-8971-b7abdef83a86"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6435),
                            TotalAmount = 110.4m
                        },
                        new
                        {
                            Id = new Guid("21eb4242-9917-44b2-ae93-d65cf8f31766"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 15,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("fc693bcd-807b-4506-a8fd-dc3e31905a81"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6439),
                            TotalAmount = 217.5m
                        },
                        new
                        {
                            Id = new Guid("bb31d780-6015-419f-bdac-9a170c091981"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 1,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("29585767-ced3-46a6-8f1f-06455c4b1172"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6446),
                            TotalAmount = 13.5m
                        },
                        new
                        {
                            Id = new Guid("d135b32e-1a23-461a-b924-f6cfbbe9d852"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 12,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("07a67762-a063-46db-94d1-080237b187a5"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6452),
                            TotalAmount = 192m
                        },
                        new
                        {
                            Id = new Guid("05f52b15-99c5-4715-8919-931fe0a5a45c"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 20,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("bab92f8b-1fd6-4fbb-9c66-777c49280d54"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6456),
                            TotalAmount = 310.0m
                        },
                        new
                        {
                            Id = new Guid("984e71f4-3c09-428c-82d0-190589c745dd"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 15,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("75734df5-e59e-4d9e-a224-ed8e4ae67fdd"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6462),
                            TotalAmount = 150m
                        },
                        new
                        {
                            Id = new Guid("99899390-52dc-4325-886b-8396e93861a9"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 1,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("d02988c8-bd91-400d-8593-403c285c6dfb"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6468),
                            TotalAmount = 28m
                        },
                        new
                        {
                            Id = new Guid("ff27ae7c-46da-4122-9fcb-d80506b1a752"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("f6c1d21b-b9dd-452f-8e14-364f530bf7b8"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6472),
                            TotalAmount = 264.0m
                        },
                        new
                        {
                            Id = new Guid("c24544d1-906b-4025-a533-0c1b1a0f8f15"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 15,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("6e4aaccc-3c0d-4d91-a8e0-10e1a70a24f2"),
                            SaleDate = new DateTime(2024, 9, 14, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6478),
                            TotalAmount = 225m
                        },
                        new
                        {
                            Id = new Guid("b358a9a1-5da4-456a-9312-e96e91262f54"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 2,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("9ca19c31-2e04-42e7-8cad-6e61bd177eaf"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6482),
                            TotalAmount = 84m
                        },
                        new
                        {
                            Id = new Guid("933b2075-6036-4e43-a6b4-9201ad655677"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 12,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("4d165d8f-fbcf-4144-a318-374e7f08cb57"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6489),
                            TotalAmount = 480m
                        },
                        new
                        {
                            Id = new Guid("da0a9bf0-7b20-4585-9ee3-6aac02f50570"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("1d74b052-3b59-465f-add2-d91f96b8961a"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6495),
                            TotalAmount = 336m
                        },
                        new
                        {
                            Id = new Guid("b08fbe2e-f6a5-4740-aabf-02911dcf767c"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("45859bd4-b0bd-4491-8b1b-7c33a940df8a"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6499),
                            TotalAmount = 272m
                        },
                        new
                        {
                            Id = new Guid("2b868ef6-6bc7-4227-a9c1-9c9f3d5e7051"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 2,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("19924c8f-32e0-4c3d-b425-995ed0ddca5a"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6505),
                            TotalAmount = 37.0m
                        },
                        new
                        {
                            Id = new Guid("292704ff-936f-4829-be2a-57570af038cb"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("d5d66b38-5140-485b-8575-f83d5fae6a5f"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6511),
                            TotalAmount = 256m
                        },
                        new
                        {
                            Id = new Guid("b98793e4-23fa-4644-bf65-f9d1b3e56dae"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("dd636f75-f510-47eb-bfc8-cf2613defdba"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6515),
                            TotalAmount = 232.0m
                        },
                        new
                        {
                            Id = new Guid("1972b367-b421-4fa2-a85e-403d14e0f1cc"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 2,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("6dac4780-fbf3-41f4-8971-b7abdef83a86"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6521),
                            TotalAmount = 13.8m
                        },
                        new
                        {
                            Id = new Guid("7ffc51bb-e35f-4981-b4f9-53cebfa702a8"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 20,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("fc693bcd-807b-4506-a8fd-dc3e31905a81"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6549),
                            TotalAmount = 290.0m
                        },
                        new
                        {
                            Id = new Guid("c0e7f633-ddbc-4339-8707-47a8fb592c98"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 20,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("29585767-ced3-46a6-8f1f-06455c4b1172"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6556),
                            TotalAmount = 270.0m
                        },
                        new
                        {
                            Id = new Guid("87218ad0-886b-42df-b339-5f9f0d53680d"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 12,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("07a67762-a063-46db-94d1-080237b187a5"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6562),
                            TotalAmount = 192m
                        },
                        new
                        {
                            Id = new Guid("0dccfdc6-7ef0-4633-9142-daf77aeb7ad5"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 12,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("bab92f8b-1fd6-4fbb-9c66-777c49280d54"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6566),
                            TotalAmount = 186.0m
                        },
                        new
                        {
                            Id = new Guid("a97a1f43-8e5b-40f5-9f17-8b5bc308db10"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 20,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("75734df5-e59e-4d9e-a224-ed8e4ae67fdd"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6571),
                            TotalAmount = 200m
                        },
                        new
                        {
                            Id = new Guid("4f425374-8f23-4f73-b2db-c3faed184ae1"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 1,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("d02988c8-bd91-400d-8593-403c285c6dfb"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6577),
                            TotalAmount = 28m
                        },
                        new
                        {
                            Id = new Guid("54c79c29-3eb1-4067-8c15-29a6bd9dc0ca"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 11,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("f6c1d21b-b9dd-452f-8e14-364f530bf7b8"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6581),
                            TotalAmount = 181.5m
                        },
                        new
                        {
                            Id = new Guid("b3e0e8a3-f84a-4a07-b450-52dda51ae723"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 2,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("6e4aaccc-3c0d-4d91-a8e0-10e1a70a24f2"),
                            SaleDate = new DateTime(2024, 9, 13, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6587),
                            TotalAmount = 30m
                        },
                        new
                        {
                            Id = new Guid("55223675-6631-4cbe-a789-5514771083cc"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 20,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("9ca19c31-2e04-42e7-8cad-6e61bd177eaf"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6591),
                            TotalAmount = 840m
                        },
                        new
                        {
                            Id = new Guid("86787c8c-10ff-4a78-b2cf-649dd2df0e2b"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("4d165d8f-fbcf-4144-a318-374e7f08cb57"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6598),
                            TotalAmount = 640m
                        },
                        new
                        {
                            Id = new Guid("61705ca6-8ce1-47d2-941c-04cb485351d2"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 18,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("1d74b052-3b59-465f-add2-d91f96b8961a"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6604),
                            TotalAmount = 378m
                        },
                        new
                        {
                            Id = new Guid("24131f61-6ea3-42a3-8c43-fffdbc2595ea"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 10,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("45859bd4-b0bd-4491-8b1b-7c33a940df8a"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6608),
                            TotalAmount = 170m
                        },
                        new
                        {
                            Id = new Guid("fb506b42-7353-4f64-80ae-80a1375a183c"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 10,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("19924c8f-32e0-4c3d-b425-995ed0ddca5a"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6614),
                            TotalAmount = 185.0m
                        },
                        new
                        {
                            Id = new Guid("1e5e04ee-b00b-4b37-ba45-fa6ba7f2f6e6"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 11,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("d5d66b38-5140-485b-8575-f83d5fae6a5f"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6620),
                            TotalAmount = 176m
                        },
                        new
                        {
                            Id = new Guid("90684023-0842-45e2-915e-d94c077d028c"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 11,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("dd636f75-f510-47eb-bfc8-cf2613defdba"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6624),
                            TotalAmount = 159.5m
                        },
                        new
                        {
                            Id = new Guid("2a036ac6-b7d2-4909-a8c3-60d750183525"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 11,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("6dac4780-fbf3-41f4-8971-b7abdef83a86"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6630),
                            TotalAmount = 75.9m
                        },
                        new
                        {
                            Id = new Guid("d992eb83-3055-4e57-95ce-2be49027d8a2"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("fc693bcd-807b-4506-a8fd-dc3e31905a81"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6634),
                            TotalAmount = 232.0m
                        },
                        new
                        {
                            Id = new Guid("4b2edfdf-c993-41c8-8337-5bcf1950c638"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 11,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("29585767-ced3-46a6-8f1f-06455c4b1172"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6639),
                            TotalAmount = 148.5m
                        },
                        new
                        {
                            Id = new Guid("c30c0d2d-c6ec-49d4-b780-dba4185571e1"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 11,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("07a67762-a063-46db-94d1-080237b187a5"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6645),
                            TotalAmount = 176m
                        },
                        new
                        {
                            Id = new Guid("011e08da-123a-491c-a1d8-b5e43eb5474c"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 20,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("bab92f8b-1fd6-4fbb-9c66-777c49280d54"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6649),
                            TotalAmount = 310.0m
                        },
                        new
                        {
                            Id = new Guid("52645748-0676-44fb-89ae-44fd9943faf9"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 18,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("75734df5-e59e-4d9e-a224-ed8e4ae67fdd"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6655),
                            TotalAmount = 180m
                        },
                        new
                        {
                            Id = new Guid("a4253507-0f3f-4797-b098-b4eb4da5a517"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 12,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("d02988c8-bd91-400d-8593-403c285c6dfb"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6661),
                            TotalAmount = 336m
                        },
                        new
                        {
                            Id = new Guid("37362e4b-d87f-496e-a55a-50242ba4e649"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 1,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("f6c1d21b-b9dd-452f-8e14-364f530bf7b8"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6665),
                            TotalAmount = 16.5m
                        },
                        new
                        {
                            Id = new Guid("0e4d285b-6328-4c1b-a5be-9826a613ab1d"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 15,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("6e4aaccc-3c0d-4d91-a8e0-10e1a70a24f2"),
                            SaleDate = new DateTime(2024, 9, 12, 20, 29, 10, 804, DateTimeKind.Local).AddTicks(6671),
                            TotalAmount = 225m
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.StockOrders", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RestaurantItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantItemId");

                    b.HasIndex("SupplierId");

                    b.ToTable("StockOrders");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierInventories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierItemId");

                    b.ToTable("SupplierInventories");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierItems");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Suppliers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a04327d-3b36-40ea-8759-f3d479e36529"),
                            Address = "12 Oceanview Drive",
                            City = "Bondi Beach",
                            ContactEmail = "jane@befood.com",
                            ContactName = "Jane Smith",
                            ContactPhone = "03 9654 3210",
                            CreatedAt = new DateTime(2024, 1, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "B&E Food",
                            State = "VIC",
                            UpdatedAt = new DateTime(2024, 1, 1, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cf762d80-3731-4d9d-af92-b77f99676005"),
                            Address = "45 Maple Street",
                            City = "South Yarra",
                            ContactEmail = "SarahJohnso@CFS.com",
                            ContactName = "Sarah Johnso",
                            ContactPhone = "07 3345 6721",
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(1039),
                            Name = "Complete Food Services",
                            State = "VIC",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(1629)
                        },
                        new
                        {
                            Id = new Guid("114288a7-a300-42c6-8578-5f52df5ce147"),
                            Address = "88 Kangaroo Court",
                            City = " Brisbane",
                            ContactEmail = " JamesCooper@FFI.com",
                            ContactName = "James Cooper",
                            ContactPhone = "08 9314 7890",
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(1639),
                            Name = "Fresh Food Industries",
                            State = "VIC",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(1642)
                        },
                        new
                        {
                            Id = new Guid("72ddd782-e777-41fe-85b2-e88c189a88f5"),
                            Address = "23 Sunset Avenue",
                            City = "Fremantle",
                            ContactEmail = "OliviaMiller@GFIFood.com",
                            ContactName = "Olivia Miller",
                            ContactPhone = "03 6234 9087",
                            CreatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(1645),
                            Name = "GFI Foods",
                            State = "VIC",
                            UpdatedAt = new DateTime(2024, 9, 14, 20, 29, 10, 525, DateTimeKind.Local).AddTicks(1647)
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.AlertRecipient", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.InventoryAlerts", "InventoryAlert")
                        .WithMany()
                        .HasForeignKey("InventoryAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryAlert");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Budgets", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.ExpenseReports", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Expenses", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryAlerts", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.RestaurantItems", "RestaurantItem")
                        .WithMany()
                        .HasForeignKey("RestaurantItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestaurantItem");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryReports", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantInventories", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestroFlowAPI.Models.RestaurantItems", "RestaurantItem")
                        .WithMany()
                        .HasForeignKey("RestaurantItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestroFlowAPI.Models.Suppliers", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantItem");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantItems", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestroFlowAPI.Models.Suppliers", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantMenus", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Reviews", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SaleReports", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Sales", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.PaymentMethods", "PaymentMethods")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.RestaurantMenus", "RestaurantMenus")
                        .WithMany()
                        .HasForeignKey("RestaurantMenuId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PaymentMethods");

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantMenus");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.StockOrders", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.RestaurantItems", "RestaurantItem")
                        .WithMany()
                        .HasForeignKey("RestaurantItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.Suppliers", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantItem");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierInventories", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Suppliers", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.SupplierItems", "SupplierItems")
                        .WithMany()
                        .HasForeignKey("SupplierItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Supplier");

                    b.Navigation("SupplierItems");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierItems", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Suppliers", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
