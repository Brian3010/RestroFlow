// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestroFlowAPI.Data;

#nullable disable

namespace RestroFlowAPI.Migrations.RestroFlowDb
{
    [DbContext(typeof(RestroFlowDbContext))]
    [Migration("20240911165134_Seeding table Sales ")]
    partial class SeedingtableSales
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestroFlowAPI.Models.AlertRecipient", b =>
                {
                    b.Property<Guid>("AlertRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryAlertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlertRecipientId");

                    b.HasIndex("InventoryAlertId");

                    b.ToTable("AlertRecipients");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Budgets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BudgetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BudgetCategory")
                        .HasColumnType("int");

                    b.Property<DateTime>("BudgetEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BudgetStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.ExpenseReports", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpenseTimePeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighestExpenseCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LaborCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LowestExpenseCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MiscellaneousExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Utilities")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("ExpenseReports");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Expenses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryAlerts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AlertType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RestaurantItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Threshold")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantItemId");

                    b.ToTable("InventoryAlerts");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryReports", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("InventoryReports");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.PaymentMethods", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantInventories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUdpated")
                        .HasColumnType("datetime2");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantItemId");

                    b.HasIndex("SupplierId");

                    b.ToTable("RestaurantInventories");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SupplierId");

                    b.ToTable("RestaurantItems");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantMenus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantMenus");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Restaurants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Reviews", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReviewContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewSource")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SaleReports", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BestSellingItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BestSellingItemQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberOfTransactions")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SalesByCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesByPaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSalesRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WorstSellingItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorstSellingItemQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("SaleReports");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Sales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RestaurantMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantMenuId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efcc7fdb-fb0a-4d58-aa44-3d5fe5525358"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 10,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("9ca19c31-2e04-42e7-8cad-6e61bd177eaf"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1185),
                            TotalAmount = 420m
                        },
                        new
                        {
                            Id = new Guid("2e8aca7b-3aad-427f-be27-940dca1c557e"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 18,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("4d165d8f-fbcf-4144-a318-374e7f08cb57"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1236),
                            TotalAmount = 720m
                        },
                        new
                        {
                            Id = new Guid("e53735da-a5da-4251-ad3b-419382ed6533"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 2,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("1d74b052-3b59-465f-add2-d91f96b8961a"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1243),
                            TotalAmount = 42m
                        },
                        new
                        {
                            Id = new Guid("8bdf2091-54be-42c2-8806-4ac1f33e50b6"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("45859bd4-b0bd-4491-8b1b-7c33a940df8a"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1248),
                            TotalAmount = 272m
                        },
                        new
                        {
                            Id = new Guid("a8f70242-8a62-40de-b891-859682124768"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("19924c8f-32e0-4c3d-b425-995ed0ddca5a"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1254),
                            TotalAmount = 296.0m
                        },
                        new
                        {
                            Id = new Guid("59fd5cfd-912f-4588-a803-7b28eeb83c8f"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 18,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("d5d66b38-5140-485b-8575-f83d5fae6a5f"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1290),
                            TotalAmount = 288m
                        },
                        new
                        {
                            Id = new Guid("2cd54c28-dd79-4866-bd16-8d657f6d028d"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 15,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("dd636f75-f510-47eb-bfc8-cf2613defdba"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1295),
                            TotalAmount = 217.5m
                        },
                        new
                        {
                            Id = new Guid("cb294caf-d5db-4391-8b35-06088d44f337"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 2,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("6dac4780-fbf3-41f4-8971-b7abdef83a86"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1301),
                            TotalAmount = 13.8m
                        },
                        new
                        {
                            Id = new Guid("3e375165-0c1c-4b92-af7c-e7e5462c0af5"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 10,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("fc693bcd-807b-4506-a8fd-dc3e31905a81"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1305),
                            TotalAmount = 145.0m
                        },
                        new
                        {
                            Id = new Guid("9df343b1-af60-49fc-9aae-b7deb602d187"),
                            PaymentMethodId = new Guid("6eff914c-554b-47f2-b77f-a1b652f63337"),
                            Quantity = 1,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("29585767-ced3-46a6-8f1f-06455c4b1172"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1312),
                            TotalAmount = 13.5m
                        },
                        new
                        {
                            Id = new Guid("0bc64787-63d1-4820-b042-55816b6f3f9a"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 12,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("07a67762-a063-46db-94d1-080237b187a5"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1318),
                            TotalAmount = 192m
                        },
                        new
                        {
                            Id = new Guid("990bc813-7157-4e28-80b6-ae2911683f6b"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 1,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("bab92f8b-1fd6-4fbb-9c66-777c49280d54"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1322),
                            TotalAmount = 15.5m
                        },
                        new
                        {
                            Id = new Guid("acbbe837-e943-4c50-90b6-476def8ab77d"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 18,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("75734df5-e59e-4d9e-a224-ed8e4ae67fdd"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1328),
                            TotalAmount = 180m
                        },
                        new
                        {
                            Id = new Guid("c7c272bf-8dce-4e74-b350-14f1b03aa177"),
                            PaymentMethodId = new Guid("a6995138-8ce2-4adb-9804-84b905125a7f"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("d02988c8-bd91-400d-8593-403c285c6dfb"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1333),
                            TotalAmount = 448m
                        },
                        new
                        {
                            Id = new Guid("6e172d07-9980-4ba3-b051-2ebb175f49f5"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 16,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("f6c1d21b-b9dd-452f-8e14-364f530bf7b8"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1337),
                            TotalAmount = 264.0m
                        },
                        new
                        {
                            Id = new Guid("ce3ff72a-42f3-4f62-b013-02750ed2d57a"),
                            PaymentMethodId = new Guid("4fd74864-68d0-44c7-ae4d-548aef790aad"),
                            Quantity = 11,
                            RestaurantId = new Guid("cc0db03e-f425-459f-88ca-26496d389dc1"),
                            RestaurantMenuId = new Guid("6e4aaccc-3c0d-4d91-a8e0-10e1a70a24f2"),
                            SaleDate = new DateTime(2024, 9, 11, 2, 51, 34, 57, DateTimeKind.Local).AddTicks(1343),
                            TotalAmount = 165m
                        });
                });

            modelBuilder.Entity("RestroFlowAPI.Models.StockOrders", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RestaurantItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantItemId");

                    b.HasIndex("SupplierId");

                    b.ToTable("StockOrders");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierInventories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierItemId");

                    b.ToTable("SupplierInventories");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierItems");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Suppliers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.AlertRecipient", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.InventoryAlerts", "InventoryAlert")
                        .WithMany()
                        .HasForeignKey("InventoryAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryAlert");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Budgets", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.ExpenseReports", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Expenses", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryAlerts", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.RestaurantItems", "RestaurantItem")
                        .WithMany()
                        .HasForeignKey("RestaurantItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestaurantItem");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.InventoryReports", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantInventories", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestroFlowAPI.Models.RestaurantItems", "RestaurantItem")
                        .WithMany()
                        .HasForeignKey("RestaurantItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestroFlowAPI.Models.Suppliers", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantItem");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantItems", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestroFlowAPI.Models.Suppliers", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.RestaurantMenus", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Reviews", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SaleReports", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("restaurant");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.Sales", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.PaymentMethods", "PaymentMethods")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.RestaurantMenus", "RestaurantMenus")
                        .WithMany()
                        .HasForeignKey("RestaurantMenuId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PaymentMethods");

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantMenus");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.StockOrders", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Restaurants", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.RestaurantItems", "RestaurantItem")
                        .WithMany()
                        .HasForeignKey("RestaurantItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.Suppliers", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantItem");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierInventories", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Suppliers", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RestroFlowAPI.Models.SupplierItems", "SupplierItems")
                        .WithMany()
                        .HasForeignKey("SupplierItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Supplier");

                    b.Navigation("SupplierItems");
                });

            modelBuilder.Entity("RestroFlowAPI.Models.SupplierItems", b =>
                {
                    b.HasOne("RestroFlowAPI.Models.Suppliers", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
