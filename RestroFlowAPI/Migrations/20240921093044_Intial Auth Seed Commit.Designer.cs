// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestroFlowAPI.Data;

#nullable disable

namespace RestroFlowAPI.Migrations
{
    [DbContext(typeof(RestroFlowAuthDbContext))]
    [Migration("20240921093044_Intial Auth Seed Commit")]
    partial class IntialAuthSeedCommit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7548f645-d440-4f78-a9f7-5c550018507d",
                            ConcurrencyStamp = "7548f645-d440-4f78-a9f7-5c550018507d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "12a30017-f331-45e6-8944-74f1ee52d686",
                            ConcurrencyStamp = "12a30017-f331-45e6-8944-74f1ee52d686",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "aa60f3e2-a997-4bc9-b16f-1617f950bc88",
                            ConcurrencyStamp = "aa60f3e2-a997-4bc9-b16f-1617f950bc88",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "5f47664-7802-49d9-ba29-f9f30f6d31fa",
                            ConcurrencyStamp = "5f47664-7802-49d9-ba29-f9f30f6d31fa",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "21804e79-b2bb-4a6e-9418-3cab51e579ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56394699-76b1-471f-ac50-3be45a875ef2",
                            Email = "brian-admin@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRIAN-ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "BRIAN-ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOtwM1Dm/6g5F8nwG46auYP8MY5Y4a0YE8LH5GA+0iKPtYIYcJyjX1TaqvN4bmyLNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e9c8212-9f02-406c-81a3-b96afaf11621",
                            TwoFactorEnabled = false,
                            UserName = "brian-admin@example.com"
                        },
                        new
                        {
                            Id = "f2ba15e2-f1d3-43d1-bb84-6767253ebbe2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7eba8b5f-75ec-4f00-9e23-ccd561468108",
                            Email = "alice-owner@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE-OWNER@EXAMPLE.COM",
                            NormalizedUserName = "ALICE-OWNER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDsKyCUgYH2vrw5rpO6IJfoCOamTgfEaqstEin4K9GVwzCTSycHQAySnG7o+c23gIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a0148c7-65a4-40bf-b016-973af7c30a14",
                            TwoFactorEnabled = false,
                            UserName = "alice-owner@example.com"
                        },
                        new
                        {
                            Id = "9125374f-e121-40f2-b42f-089529dd5fbd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44cfcb50-c5e0-44fc-9543-edb948e8c3ba",
                            Email = "bob-manager@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB-MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "BOB-MANAGER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL/oTknuh1ylPpV2SPg6NxjAmJ+Tbgt84XKOlPTnk6LjcZbQRIbF6UsQCUmUCse3cg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b25ad51-b0f8-4194-bcd9-c5e03097e3ed",
                            TwoFactorEnabled = false,
                            UserName = "bob-manager@example.com"
                        },
                        new
                        {
                            Id = "36c8f410-61d4-49fb-beb0-ff35e319614e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "059bed4a-661e-4435-9a09-8d1d33ed4d9a",
                            Email = "charlie-manager@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHARLIE-MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "CHARLIE-MANAGER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOScjU/1q7Xjq1ySdJ9IJ0VRW59GpgxLxUzMe5K664eYZtmHaJoC9HjW+L0YCydbcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4761c29-5625-4d1f-9e57-2fae3cf09b4c",
                            TwoFactorEnabled = false,
                            UserName = "charlie-manager@example.com"
                        },
                        new
                        {
                            Id = "25a8ee82-6527-4c92-b374-afa6a65cb3b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4659f876-b1cd-4c4f-891c-f3affc6bb37f",
                            Email = "melissa-staff@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MELISSA-STAFF@EXAMPLE.COM",
                            NormalizedUserName = "MELISSA-STAFF@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECbeNcIn/ry3dCm0mNqR7TxsFERLbiup4IYN0RilGIYtjYFUmnoAv8nvJnMJMAS3xg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "adf29cc5-3e1b-4a8b-9c3a-fc5a3f96d9c3",
                            TwoFactorEnabled = false,
                            UserName = "melissa-staff@example.com"
                        },
                        new
                        {
                            Id = "55bc7fd2-de9a-4a8b-9bb8-5d384b8e8f23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53c97e20-cc61-4553-bef6-83ba76c56ebc",
                            Email = "thomas-staff@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "THOMAS-STAFF@EXAMPLE.COM",
                            NormalizedUserName = "THOMAS-STAFF@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMLHdu3nJnOmEpvBjuH6dLN2ErTwJVZaUrIveAoCKl2ueFq1DcH9tuFqSzaDiFkiwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0a755db-fd24-472c-b122-fdff97ae44a8",
                            TwoFactorEnabled = false,
                            UserName = "thomas-staff@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "21804e79-b2bb-4a6e-9418-3cab51e579ac",
                            RoleId = "7548f645-d440-4f78-a9f7-5c550018507d"
                        },
                        new
                        {
                            UserId = "f2ba15e2-f1d3-43d1-bb84-6767253ebbe2",
                            RoleId = "12a30017-f331-45e6-8944-74f1ee52d686"
                        },
                        new
                        {
                            UserId = "9125374f-e121-40f2-b42f-089529dd5fbd",
                            RoleId = "5f47664-7802-49d9-ba29-f9f30f6d31fa"
                        },
                        new
                        {
                            UserId = "36c8f410-61d4-49fb-beb0-ff35e319614e",
                            RoleId = "5f47664-7802-49d9-ba29-f9f30f6d31fa"
                        },
                        new
                        {
                            UserId = "25a8ee82-6527-4c92-b374-afa6a65cb3b9",
                            RoleId = "aa60f3e2-a997-4bc9-b16f-1617f950bc88"
                        },
                        new
                        {
                            UserId = "55bc7fd2-de9a-4a8b-9bb8-5d384b8e8f23",
                            RoleId = "aa60f3e2-a997-4bc9-b16f-1617f950bc88"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
